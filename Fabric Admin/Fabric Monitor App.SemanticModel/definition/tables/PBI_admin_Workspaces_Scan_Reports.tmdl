table PBI_admin_Workspaces_Scan_Reports
	lineageTag: 741876c8-a367-40b1-959a-2dadcd449558

	column id
		dataType: string
		lineageTag: d3bff2aa-ec61-48d3-880e-29a605d8812b
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column name
		dataType: string
		lineageTag: 992936bb-d8fb-4e08-97e9-9d1d187bbbb4
		summarizeBy: none
		sourceColumn: name

		annotation SummarizationSetBy = Automatic

	column type
		dataType: string
		lineageTag: 8b82b927-32d6-4e03-a083-e2d80b8ab2c9
		summarizeBy: none
		sourceColumn: type

		annotation SummarizationSetBy = Automatic

	column state
		dataType: string
		lineageTag: 5c58d6f2-6cf8-46e8-87c7-c70856173f99
		summarizeBy: none
		sourceColumn: state

		annotation SummarizationSetBy = Automatic

	column isOnDedicatedCapacity
		dataType: string
		lineageTag: aaf3eebe-b541-4a43-9338-ed4af7f2fb48
		summarizeBy: none
		sourceColumn: isOnDedicatedCapacity

		annotation SummarizationSetBy = Automatic

	column reportType
		dataType: string
		lineageTag: 459d5750-dba5-4971-a908-a225f799ebb4
		summarizeBy: none
		sourceColumn: reportType

		annotation SummarizationSetBy = Automatic

	column 'id.1'
		dataType: string
		lineageTag: f9bb58bb-8b46-47ca-bbc4-1e0b32841186
		summarizeBy: none
		sourceColumn: id.1

		annotation SummarizationSetBy = Automatic

	column 'name.1'
		dataType: string
		lineageTag: 996d0085-998a-406b-8fe2-bf2124945d02
		summarizeBy: none
		sourceColumn: name.1

		annotation SummarizationSetBy = Automatic

	column datasetId
		dataType: string
		lineageTag: 8ce0831a-9f49-4c06-8af2-da5e319b9ddd
		summarizeBy: none
		sourceColumn: datasetId

		annotation SummarizationSetBy = Automatic

	column createdDateTime
		dataType: string
		lineageTag: 4c571ade-b2ca-439f-a648-bd39caf92022
		summarizeBy: none
		sourceColumn: createdDateTime

		annotation SummarizationSetBy = Automatic

	column modifiedDateTime
		dataType: string
		lineageTag: c5f8b6a1-bd9a-4cbf-836e-ca0def145c9a
		summarizeBy: none
		sourceColumn: modifiedDateTime

		annotation SummarizationSetBy = Automatic

	column modifiedBy
		dataType: string
		lineageTag: 40314c38-df6b-4bfa-8921-34b21a8d5876
		summarizeBy: none
		sourceColumn: modifiedBy

		annotation SummarizationSetBy = Automatic

	column createdBy
		dataType: string
		lineageTag: 434bdaf5-d18c-409f-98a4-4f4bc326051b
		summarizeBy: none
		sourceColumn: createdBy

		annotation SummarizationSetBy = Automatic

	column modifiedById
		dataType: string
		lineageTag: 39931bfe-487e-4834-81fb-89a4e1a3b390
		summarizeBy: none
		sourceColumn: modifiedById

		annotation SummarizationSetBy = Automatic

	column createdById
		dataType: string
		lineageTag: 3294f062-64e0-4c7a-8eae-07a59221aae2
		summarizeBy: none
		sourceColumn: createdById

		annotation SummarizationSetBy = Automatic

	partition PBI_admin_Workspaces_Scan_Reports = m
		mode: import
		source = ```
				let
				    // Define your tenant ID, client ID, and client secret
				    tenantId = TID,
				    clientId = CID,
				    clientSecret = CS,
				    Scope = "https://analysis.windows.net/powerbi/api/.default",
				    API = "https://api.powerbi.com/v1.0/myorg/admin",
				    What="groups",
				
				    // Get the access token
				    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
				    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
				    
				    // Make the request to get the token
				    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
				        [
				            Content = Text.ToBinary(body),
				            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
				        ])),
				        
				    accessToken = tokenResponse[access_token],
				
				    // Function to get groups with pagination
				    GetGroups = (url) =>
				    let
				
				        // Make the request to get groups
				        GraphResponse = Json.Document(Web.Contents(API, 
				            [
				                Headers = [#"Authorization" = "Bearer " & accessToken],
				                
				                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
				                
				            ])),
				        
				        // Get the groups from the response
				        GraphList = GraphResponse[value],
				
				        // Get Workspace id's
				        IdList = List.Transform(GraphList, each [id]),
				
				
				         // Define the request body as a JSON-formatted string
				        bodys = Json.FromValue(              
				        [workspaces = IdList]
				        ),
				
				
				        // Make the request to get groups
				        ScanWorkspace = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/getInfo", 
				            [  
				                Headers = [#"Authorization" = "Bearer " & accessToken, #"Content-Type" = "application/json"],
				                Content = bodys 
				            ])),
				        ScanIDStatus = ScanWorkspace[id],
				
				        // Check Status of scan
				        ScanStatus = (ids) =>
				        let
				            ScanStatus = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanStatus/", 
				                [
				                    Headers = [#"Authorization" = "Bearer " & accessToken],
				                
				                    RelativePath = ids 
				                
				                ]))
				        in 
				            ScanStatus[status],
				        
				        checks =  ScanStatus(ScanIDStatus),
				
				        // Check untill Succeeded
				        reccek = if checks <> "Succeeded" then Function.InvokeAfter(()=> @ScanStatus(ScanIDStatus), #duration(0,0,0,5)) else {},
				        
				        
				
				        //Scan Result
				        ScanResult = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanResult/", 
				                [
				                    Headers = [#"Authorization" = "Bearer " & accessToken],
				                
				                    RelativePath = ScanIDStatus 
				                
				                ])),
				        rezlist = Record.ToList(ScanResult),
				
				
				
				        // Check if there is a next link for pagination
				        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
				        
				        // If there is a next link, recursively get the next page
				        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
				    in
				       List.Combine({rezlist, NextGroups}),
				
				    // Initial call to the function
				    AllGroups = GetGroups(null),
				
				    // Convert the list of groups to a table
				    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
				    #"Expanded Column1" = Table.ExpandListColumn(GraphTable, "Column1"),
				    #"Expanded Column2" = Table.ExpandRecordColumn(#"Expanded Column1", "Column1", {"id", "name", "type", "state", "isOnDedicatedCapacity", "reports"}, {"id", "name", "type", "state", "isOnDedicatedCapacity", "reports"}),
				    #"Expanded reports" = Table.ExpandListColumn(#"Expanded Column2", "reports"),
				    #"Expanded reports1" = Table.ExpandRecordColumn(#"Expanded reports", "reports", {"reportType", "id", "name", "datasetId", "createdDateTime", "modifiedDateTime", "modifiedBy", "createdBy", "modifiedById", "createdById"}, {"reportType", "id.1", "name.1", "datasetId", "createdDateTime", "modifiedDateTime", "modifiedBy", "createdBy", "modifiedById", "createdById"}),
				    #"Filtered Rows" = Table.SelectRows(#"Expanded reports1", each ([id.1] <> null))
				in
				    #"Filtered Rows"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

