table Fabric_admin_Workspaces
	lineageTag: 21b88994-a292-4cae-b19c-66153f859109

	column id
		dataType: string
		lineageTag: faeac430-690f-4b3a-ba14-f157fd7fb8be
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column name
		dataType: string
		lineageTag: 74f66488-5c8f-40c7-b7ec-d3181a066456
		summarizeBy: none
		sourceColumn: name

		annotation SummarizationSetBy = Automatic

	column state
		dataType: string
		lineageTag: e42f45e4-71e1-4f2a-a4f9-561727899ae8
		summarizeBy: none
		sourceColumn: state

		annotation SummarizationSetBy = Automatic

	column type
		dataType: string
		lineageTag: 46bac1b9-3754-499b-8d1f-c0827e8170e7
		summarizeBy: none
		sourceColumn: type

		annotation SummarizationSetBy = Automatic

	column capacityId
		dataType: string
		lineageTag: d2748eab-561d-4454-b429-ef877ecdaa81
		summarizeBy: none
		sourceColumn: capacityId

		annotation SummarizationSetBy = Automatic

	partition Fabric_admin_Workspaces = m
		mode: import
		source = ```
				let
				    // Define your tenant ID, client ID, and client secret
				    tenantId = TID,
				    clientId = CID,
				    clientSecret = CS,
				    Scope = "https://analysis.windows.net/powerbi/api/.default",
				    API = "https://api.fabric.microsoft.com/v1/admin",
				    What="workspaces",
				
				    // Get the access token
				    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
				    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
				    
				    // Make the request to get the token
				    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
				        [
				            Content = Text.ToBinary(body),
				            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
				        ])),
				        
				    accessToken = tokenResponse[access_token],
				
				    // Function to get groups with pagination
				    GetGroups = (url) =>
				    let
				
				        // Make the request to get groups
				        GraphResponse = Json.Document(Web.Contents(API, 
				            [
				                Headers = [#"Authorization" = "Bearer " & accessToken],
				                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
				                
				            ])),
				        
				        // Get the groups from the response
				        GraphList = Record.FieldOrDefault(GraphResponse, What, null),//GraphResponse[What],
				        
				        // Check if there is a next link for pagination
				        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
				        
				        // If there is a next link, recursively get the next page
				        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
				    in
				        List.Combine({GraphList,  NextGroups}),
				
				    // Initial call to the function
				    AllGroups = GetGroups(null),
				
				    // Convert the list of groups to a table
				    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
				    #"Expanded Column1" = Table.ExpandRecordColumn(GraphTable, "Column1", {"id", "name", "state", "type", "capacityId"}, {"id", "name", "state", "type", "capacityId"})
				in
				    #"Expanded Column1"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

