table PBI_admin_Workspaces
	lineageTag: 232f8285-66da-4c0d-96bc-dd1d60ae5bc5

	column id
		dataType: string
		lineageTag: d816abf9-73e3-4108-8fcf-33ed995a608e
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column isReadOnly
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: ccf9ec3c-360e-4c96-829b-062c782348d9
		summarizeBy: none
		sourceColumn: isReadOnly

		annotation SummarizationSetBy = Automatic

	column isOnDedicatedCapacity
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 8accba10-18c6-4eef-bcea-9e2df4388a02
		summarizeBy: none
		sourceColumn: isOnDedicatedCapacity

		annotation SummarizationSetBy = Automatic

	column capacityMigrationStatus
		dataType: string
		lineageTag: 8a0baf06-327a-4ad4-b4a5-811cf6ac3735
		summarizeBy: none
		sourceColumn: capacityMigrationStatus

		annotation SummarizationSetBy = Automatic

	column type
		dataType: string
		lineageTag: c610f40c-b6f4-42c7-a23b-b7f60ab05a3b
		summarizeBy: none
		sourceColumn: type

		annotation SummarizationSetBy = Automatic

	column state
		dataType: string
		lineageTag: 1c506673-bde9-4497-92dc-e69fa1d02f5d
		summarizeBy: none
		sourceColumn: state

		annotation SummarizationSetBy = Automatic

	column 'hasWorkspaceLevelSettings '
		dataType: string
		lineageTag: 6a634a7d-7fc7-447a-917c-ae1b3545a073
		summarizeBy: none
		sourceColumn: "hasWorkspaceLevelSettings "

		annotation SummarizationSetBy = Automatic

	column name
		dataType: string
		lineageTag: 7bf9af81-1184-4418-af0a-8679a91b91f3
		summarizeBy: none
		sourceColumn: name

		annotation SummarizationSetBy = Automatic

	partition PBI_admin_Workspaces = m
		mode: import
		source = ```
				let
				    // Define your tenant ID, client ID, and client secret
				    tenantId = TID,
				    clientId = CID,
				    clientSecret = CS,
				    Scope = "https://analysis.windows.net/powerbi/api/.default",
				    API = "https://api.powerbi.com/v1.0/myorg/admin",
				    What="groups",
				
				    // Get the access token
				    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
				    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
				    
				    // Make the request to get the token
				    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
				        [
				            Content = Text.ToBinary(body),
				            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
				        ])),
				        
				    accessToken = tokenResponse[access_token],
				
				    // Function to get groups with pagination
				    GetGroups = (url) =>
				    let
				
				        // Make the request to get groups
				        GraphResponse = Json.Document(Web.Contents(API, 
				            [
				                Headers = [#"Authorization" = "Bearer " & accessToken],
				                
				                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
				                
				            ])),
				        
				        // Get the groups from the response
				        GraphList = GraphResponse[value],
				        
				        // Check if there is a next link for pagination
				        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
				        
				        // If there is a next link, recursively get the next page
				        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
				    in
				        List.Combine({GraphList, NextGroups}),
				
				    // Initial call to the function
				    AllGroups = GetGroups(null),
				
				    // Convert the list of groups to a table
				    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
				    #"Expanded Column1" = Table.ExpandRecordColumn(GraphTable, "Column1", {"id", "isReadOnly", "isOnDedicatedCapacity", "capacityMigrationStatus", "type", "state", "hasWorkspaceLevelSettings ", "name"}, {"id", "isReadOnly", "isOnDedicatedCapacity", "capacityMigrationStatus", "type", "state", "hasWorkspaceLevelSettings ", "name"}),
				    #"Changed Type" = Table.TransformColumnTypes(#"Expanded Column1",{{"isReadOnly", type logical}, {"isOnDedicatedCapacity", type logical}})
				in
				    #"Changed Type"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

