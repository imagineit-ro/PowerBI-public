table Datasets
	lineageTag: ff4f0156-f372-4c4b-8da5-9bbca4445d28

	column id
		dataType: string
		lineageTag: 124446ea-04a7-4dfc-9d50-120aadc0223a
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column name
		dataType: string
		lineageTag: d96550e4-40ce-4e69-9f45-3691bdfe9b0a
		summarizeBy: none
		sourceColumn: name

		annotation SummarizationSetBy = Automatic

	column type
		dataType: string
		lineageTag: 7011d9af-50f3-4388-acdd-dc41e241ce62
		summarizeBy: none
		sourceColumn: type

		annotation SummarizationSetBy = Automatic

	column state
		dataType: string
		lineageTag: 5ed7a850-f7a7-4c45-827a-12db80ed56d8
		summarizeBy: none
		sourceColumn: state

		annotation SummarizationSetBy = Automatic

	column isOnDedicatedCapacity
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: e7c537d2-47c1-41ea-ba06-e3530c429d72
		summarizeBy: none
		sourceColumn: isOnDedicatedCapacity

		annotation SummarizationSetBy = Automatic

	column 'datasets.id'
		dataType: string
		lineageTag: 347746c3-dac5-476a-9547-29f1281b07a4
		summarizeBy: none
		sourceColumn: datasets.id

		annotation SummarizationSetBy = Automatic

	column 'datasets.name'
		dataType: string
		lineageTag: ac28c7d3-6f23-4062-bd67-ff0ad6277d98
		summarizeBy: none
		sourceColumn: datasets.name

		annotation SummarizationSetBy = Automatic

	column 'datasets.configuredBy'
		dataType: string
		lineageTag: e3d45346-b418-4e61-bf66-190e43b20374
		summarizeBy: none
		sourceColumn: datasets.configuredBy

		annotation SummarizationSetBy = Automatic

	column 'datasets.configuredById'
		dataType: string
		lineageTag: dd4d4994-a929-4abb-8dc9-64357c876a32
		summarizeBy: none
		sourceColumn: datasets.configuredById

		annotation SummarizationSetBy = Automatic

	column 'datasets.isEffectiveIdentityRequired'
		dataType: string
		lineageTag: cd85a308-61fb-4fa9-be69-741c7d2b4424
		summarizeBy: none
		sourceColumn: datasets.isEffectiveIdentityRequired

		annotation SummarizationSetBy = Automatic

	column 'datasets.isEffectiveIdentityRolesRequired'
		dataType: string
		lineageTag: 59c5a67a-3d47-41a3-ab03-9f28ebb16c32
		summarizeBy: none
		sourceColumn: datasets.isEffectiveIdentityRolesRequired

		annotation SummarizationSetBy = Automatic

	column 'datasets.targetStorageMode'
		dataType: string
		lineageTag: a49c5331-43a8-469f-94cb-1fb629a4695c
		summarizeBy: none
		sourceColumn: datasets.targetStorageMode

		annotation SummarizationSetBy = Automatic

	column 'datasets.createdDate'
		dataType: string
		lineageTag: 5599ec7d-d151-4667-b97f-9cef2dd603fe
		summarizeBy: none
		sourceColumn: datasets.createdDate

		annotation SummarizationSetBy = Automatic

	column 'datasets.contentProviderType'
		dataType: string
		lineageTag: 5762cc14-8d27-4201-8b8b-9c0cb4f659ac
		summarizeBy: none
		sourceColumn: datasets.contentProviderType

		annotation SummarizationSetBy = Automatic

	partition Datasets = m
		mode: import
		source = ```
				let
				    // Define your tenant ID, client ID, and client secret
				    tenantId = TID,
				    clientId = CID,
				    clientSecret = CS,
				    Scope = "https://analysis.windows.net/powerbi/api/.default",
				    API = "https://api.fabric.microsoft.com/v1/admin",
				    What="workspaces",
				
				    // Get the access token
				    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
				    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
				    
				    // Make the request to get the token
				    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
				        [
				            Content = Text.ToBinary(body),
				            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
				        ])),
				        
				    accessToken = tokenResponse[access_token],
				
				
				    // Function Check Status of scan function untill Succeeded
				        ScanStatus = (sid) =>
				        let
				            ScanStatus = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanStatus/", 
				                [
				                    Headers = [#"Authorization" = "Bearer " & accessToken],
				                    RelativePath = sid 
				                ])),
				            scnisready = ScanStatus[status]         
				        in 
				            scnisready,
				
				    //Function to Get Scan Result
				        GetScanResult = (sid) =>
				        let
				        ScanResult = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanResult/", 
				                [
				                    Headers = [#"Authorization" = "Bearer " & accessToken],
				                    RelativePath = sid 
				                ])),
				                rezlist = Record.ToList(ScanResult)
				        in
				            rezlist,
				
				    // Function to Scan & Get Result if succesful
				    WSScan = (wslist) =>
				    let
				        // Get Workspace id's
				        IdList = List.Transform(wslist, each [id]),
				
				         // Define the request body as a JSON-formatted string
				        bodys = Json.FromValue(              
				        [workspaces = IdList]
				        ),
				
				        // Make the request to get groups
				        ScanWorkspace = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/getInfo", 
				            [  
				                Headers = [#"Authorization" = "Bearer " & accessToken, #"Content-Type" = "application/json"],
				                Content = bodys 
				            ])),
				        ScanID = ScanWorkspace[id],
				
				        // Get Result
				        rezfin = if ScanStatus(ScanID) = "Succeeded" then @GetScanResult(ScanID) else Function.InvokeAfter(() => @GetScanResult(ScanID),#duration(0, 0, 0, 15))
				    in
				      rezfin, 
				
				
				    // Function to get groups with pagination
				    GetGroups = (url) =>
				    let
				
				        // Make the request to get groups
				        GraphResponse = Json.Document(Web.Contents(API, 
				            [
				                Headers = [#"Authorization" = "Bearer " & accessToken],
				                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
				                
				            ])),
				        
				        // Get the groups from the response
				        GraphList = Record.FieldOrDefault(GraphResponse, What, null),//GraphResponse[What],
				        
				        // Check if there is a next link for pagination
				        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
				        
				        // If there is a next link, recursively get the next page
				        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
				    in
				        List.Combine({GraphList,  NextGroups}),
				
				    // Initial call to the function
				    AllGroups = GetGroups(null),
				
				    // Split List in chunks of 100
				    GroupBatches = List.Split(AllGroups, 100),
				
				    // For each chunk do a scan
				    Results = List.Transform(GroupBatches, each WSScan(_)),
				
				    //Convert List to table
				    Workspaces = Table.FromList(Results, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
				    #"Expanded Column1" = Table.ExpandListColumn(Workspaces, "Column1"),
				    #"Expanded Column2" = Table.ExpandListColumn(#"Expanded Column1", "Column1"),
				    #"Expanded Column3" = Table.ExpandRecordColumn(#"Expanded Column2", "Column1", {"id", "name", "type", "state", "isOnDedicatedCapacity", "datasets"}, {"id", "name", "type", "state", "isOnDedicatedCapacity", "datasets"}),
				    #"Expanded datasets" = Table.ExpandListColumn(#"Expanded Column3", "datasets"),
				    #"Expanded datasets1" = Table.ExpandRecordColumn(#"Expanded datasets", "datasets", {"id", "name", "configuredBy", "configuredById", "isEffectiveIdentityRequired", "isEffectiveIdentityRolesRequired", "targetStorageMode", "createdDate", "contentProviderType"}, {"datasets.id", "datasets.name", "datasets.configuredBy", "datasets.configuredById", "datasets.isEffectiveIdentityRequired", "datasets.isEffectiveIdentityRolesRequired", "datasets.targetStorageMode", "datasets.createdDate", "datasets.contentProviderType"}),
				    #"Changed Type" = Table.TransformColumnTypes(#"Expanded datasets1",{{"isOnDedicatedCapacity", type logical}})
				in
				    #"Changed Type"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

