table Reports
	lineageTag: 90793195-a692-4952-83d2-3d9a2a2b9fee

	column id
		dataType: string
		lineageTag: 17e8c7d6-83f4-4c43-9b2a-0e7ccdaee0d2
		summarizeBy: none
		sourceColumn: id

		annotation SummarizationSetBy = Automatic

	column name
		dataType: string
		lineageTag: 35dcc7cf-18b2-4783-ad69-73cbd2f84c33
		summarizeBy: none
		sourceColumn: name

		annotation SummarizationSetBy = Automatic

	column type
		dataType: string
		lineageTag: ae181832-f90b-4f42-a583-87a5ab781f5e
		summarizeBy: none
		sourceColumn: type

		annotation SummarizationSetBy = Automatic

	column state
		dataType: string
		lineageTag: 72193edb-c72b-46ae-adb5-740a3b3e8933
		summarizeBy: none
		sourceColumn: state

		annotation SummarizationSetBy = Automatic

	column isOnDedicatedCapacity
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: ce0b7c91-43a3-4a71-8ed3-589c1835f179
		summarizeBy: none
		sourceColumn: isOnDedicatedCapacity

		annotation SummarizationSetBy = Automatic

	column 'reports.reportType'
		dataType: string
		lineageTag: 409180fa-ffa9-4e31-af35-c9c63cd9c2a5
		summarizeBy: none
		sourceColumn: reports.reportType

		annotation SummarizationSetBy = Automatic

	column 'reports.id'
		dataType: string
		lineageTag: a0c1e58a-e037-4255-9dd9-d86411296445
		summarizeBy: none
		sourceColumn: reports.id

		annotation SummarizationSetBy = Automatic

	column 'reports.name'
		dataType: string
		lineageTag: 496f5c31-fe32-46dd-80e2-844837d6c6b8
		summarizeBy: none
		sourceColumn: reports.name

		annotation SummarizationSetBy = Automatic

	column 'reports.datasetId'
		dataType: string
		lineageTag: 59830dfc-11b7-43bf-883d-c1a1b8cd29ca
		summarizeBy: none
		sourceColumn: reports.datasetId

		annotation SummarizationSetBy = Automatic

	column 'reports.createdDateTime'
		dataType: string
		lineageTag: 6d7aa807-cbeb-4354-803d-516289769c21
		summarizeBy: none
		sourceColumn: reports.createdDateTime

		annotation SummarizationSetBy = Automatic

	column 'reports.modifiedDateTime'
		dataType: string
		lineageTag: 6658afbe-4acb-4174-af3b-113198b5b09e
		summarizeBy: none
		sourceColumn: reports.modifiedDateTime

		annotation SummarizationSetBy = Automatic

	column 'reports.modifiedBy'
		dataType: string
		lineageTag: cf2b4980-88a2-4d92-8a4d-08b9ae336d95
		summarizeBy: none
		sourceColumn: reports.modifiedBy

		annotation SummarizationSetBy = Automatic

	column 'reports.createdBy'
		dataType: string
		lineageTag: ee0cfce3-c177-4f5e-8084-b5b8fc48d028
		summarizeBy: none
		sourceColumn: reports.createdBy

		annotation SummarizationSetBy = Automatic

	column 'reports.modifiedById'
		dataType: string
		lineageTag: 5f02ab45-51b6-451c-abe0-16dd8fa89c1c
		summarizeBy: none
		sourceColumn: reports.modifiedById

		annotation SummarizationSetBy = Automatic

	column 'reports.createdById'
		dataType: string
		lineageTag: 5b392019-4ea5-4fc7-8cf7-9892c3b37441
		summarizeBy: none
		sourceColumn: reports.createdById

		annotation SummarizationSetBy = Automatic

	partition Reports = m
		mode: import
		source = ```
				let
				    // Define your tenant ID, client ID, and client secret
				    tenantId = TID,
				    clientId = CID,
				    clientSecret = CS,
				    Scope = "https://analysis.windows.net/powerbi/api/.default",
				    API = "https://api.fabric.microsoft.com/v1/admin",
				    What="workspaces",
				
				    // Get the access token
				    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
				    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
				    
				    // Make the request to get the token
				    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
				        [
				            Content = Text.ToBinary(body),
				            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
				        ])),
				        
				    accessToken = tokenResponse[access_token],
				
				
				    // Function Check Status of scan function untill Succeeded
				        ScanStatus = (sid) =>
				        let
				            ScanStatus = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanStatus/", 
				                [
				                    Headers = [#"Authorization" = "Bearer " & accessToken],
				                    RelativePath = sid 
				                ])),
				            scnisready = ScanStatus[status]         
				        in 
				            scnisready,
				
				    //Function to Get Scan Result
				        GetScanResult = (sid) =>
				        let
				        ScanResult = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanResult/", 
				                [
				                    Headers = [#"Authorization" = "Bearer " & accessToken],
				                    RelativePath = sid 
				                ])),
				                rezlist = Record.ToList(ScanResult)
				        in
				            rezlist,
				
				    // Function to Scan & Get Result if succesful
				    WSScan = (wslist) =>
				    let
				        // Get Workspace id's
				        IdList = List.Transform(wslist, each [id]),
				
				         // Define the request body as a JSON-formatted string
				        bodys = Json.FromValue(              
				        [workspaces = IdList]
				        ),
				
				        // Make the request to get groups
				        ScanWorkspace = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/getInfo", 
				            [  
				                Headers = [#"Authorization" = "Bearer " & accessToken, #"Content-Type" = "application/json"],
				                Content = bodys 
				            ])),
				        ScanID = ScanWorkspace[id],
				
				        // Get Result
				        rezfin = if ScanStatus(ScanID) = "Succeeded" then @GetScanResult(ScanID) else Function.InvokeAfter(() => @GetScanResult(ScanID),#duration(0, 0, 0, 15))
				    in
				      rezfin, 
				
				
				    // Function to get groups with pagination
				    GetGroups = (url) =>
				    let
				
				        // Make the request to get groups
				        GraphResponse = Json.Document(Web.Contents(API, 
				            [
				                Headers = [#"Authorization" = "Bearer " & accessToken],
				                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
				                
				            ])),
				        
				        // Get the groups from the response
				        GraphList = Record.FieldOrDefault(GraphResponse, What, null), //GraphResponse[What],
				        
				        // Check if there is a next link for pagination
				        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
				        
				        // If there is a next link, recursively get the next page
				        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
				    in
				        List.Combine({GraphList}),//,  NextGroups}),
				
				    // Initial call to the function
				    AllGroups = GetGroups(null),
				
				    // Split List in chunks of 100
				    GroupBatches = List.Split(AllGroups, 100),
				
				
				    // For each chunk do a scan
				    Results = List.Transform(GroupBatches, each WSScan(_)),
				
				    //Convert List to table
				    Workspaces = Table.FromList(Results, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
				    #"Expanded Column1" = Table.ExpandListColumn(Workspaces, "Column1"),
				    #"Expanded Column2" = Table.ExpandListColumn(#"Expanded Column1", "Column1"),
				    #"Expanded Column3" = Table.ExpandRecordColumn(#"Expanded Column2", "Column1", {"id", "name", "type", "state", "isOnDedicatedCapacity", "reports"}, {"id", "name", "type", "state", "isOnDedicatedCapacity", "reports"}),
				    #"Expanded reports" = Table.ExpandListColumn(#"Expanded Column3", "reports"),
				    #"Expanded reports1" = Table.ExpandRecordColumn(#"Expanded reports", "reports", {"reportType", "id", "name", "datasetId", "createdDateTime", "modifiedDateTime", "modifiedBy", "createdBy", "modifiedById", "createdById"}, {"reports.reportType", "reports.id", "reports.name", "reports.datasetId", "reports.createdDateTime", "reports.modifiedDateTime", "reports.modifiedBy", "reports.createdBy", "reports.modifiedById", "reports.createdById"}),
				    #"Changed Type" = Table.TransformColumnTypes(#"Expanded reports1",{{"isOnDedicatedCapacity", type logical}})
				in
				    #"Changed Type"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

