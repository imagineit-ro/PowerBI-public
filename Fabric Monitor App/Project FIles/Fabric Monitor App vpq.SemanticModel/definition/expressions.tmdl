expression CID = "45fa61a8-3575-4e0b-8376-b8cb4081e12a" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: d3ad1553-024f-44e6-a762-68af18a46912
	queryGroup: SP_ID

	annotation PBI_ResultType = Text

expression CS = "kt18Q~x6MRiXRJd9BvPdTxD3aPCxFmMznbBdsbhW" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: d0a2426a-610b-4a8f-84af-267d3d212cdd
	queryGroup: SP_ID

	annotation PBI_ResultType = Text

expression TID = "fd6988e7-53f7-4af3-9c30-4da902a4fc8a" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 1f7c28eb-4975-4f82-b754-ebd05ae8100b
	queryGroup: SP_ID

	annotation PBI_ResultType = Text

expression Graph_tmp_Groups = ```
		let
		    // Define your tenant ID, client ID, and client secret
		    tenantId = TID,
		    clientId = CID,
		    clientSecret = CS,
		    Scope = "https://graph.microsoft.com/.default",
		    API = "https://graph.microsoft.com/v1.0",
		    What="/groups?$top=999&",
		
		    // Get the access token
		    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
		    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
		    
		    // Make the request to get the token
		    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
		        [
		            Content = Text.ToBinary(body),
		            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
		        ])),
		        
		    accessToken = tokenResponse[access_token],
		
		    // Function to get groups with pagination
		    GetGroups = (url) =>
		    let
		
		
		        // Make the request to get groups
		        GraphResponse = Json.Document(Web.Contents(API, 
		            [
		                Headers = [#"Authorization" = "Bearer " & accessToken],
		                
		                RelativePath = if url<>null then What & Text.Middle(url, Text.PositionOf(url, "&$skiptoken=")) else What //null
		                
		            ])),
		        
		        // Get the groups from the response
		        GraphList = GraphResponse[value],
		        
		        // Check if there is a next link for pagination
		        NextLink = Record.FieldOrDefault(GraphResponse, "@odata.nextLink", null),
		        
		        // If there is a next link, recursively get the next page
		        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
		    in
		        List.Combine({GraphList, NextGroups}),
		
		    // Initial call to the function
		    AllGroups = GetGroups(null),
		
		    // Convert the list of groups to a table
		    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(GraphTable, "Column1", {"id", "deletedDateTime", "classification", "createdDateTime", "creationOptions", "description", "displayName", "expirationDateTime", "groupTypes", "isAssignableToRole", "mail", "mailEnabled", "mailNickname", "membershipRule", "membershipRuleProcessingState", "onPremisesDomainName", "onPremisesLastSyncDateTime", "onPremisesNetBiosName", "onPremisesSamAccountName", "onPremisesSecurityIdentifier", "onPremisesSyncEnabled", "preferredDataLocation", "preferredLanguage", "proxyAddresses", "renewedDateTime", "resourceBehaviorOptions", "resourceProvisioningOptions", "securityEnabled", "securityIdentifier", "theme", "uniqueName", "visibility", "onPremisesProvisioningErrors", "serviceProvisioningErrors"}, {"Column1.id", "Column1.deletedDateTime", "Column1.classification", "Column1.createdDateTime", "Column1.creationOptions", "Column1.description", "Column1.displayName", "Column1.expirationDateTime", "Column1.groupTypes", "Column1.isAssignableToRole", "Column1.mail", "Column1.mailEnabled", "Column1.mailNickname", "Column1.membershipRule", "Column1.membershipRuleProcessingState", "Column1.onPremisesDomainName", "Column1.onPremisesLastSyncDateTime", "Column1.onPremisesNetBiosName", "Column1.onPremisesSamAccountName", "Column1.onPremisesSecurityIdentifier", "Column1.onPremisesSyncEnabled", "Column1.preferredDataLocation", "Column1.preferredLanguage", "Column1.proxyAddresses", "Column1.renewedDateTime", "Column1.resourceBehaviorOptions", "Column1.resourceProvisioningOptions", "Column1.securityEnabled", "Column1.securityIdentifier", "Column1.theme", "Column1.uniqueName", "Column1.visibility", "Column1.onPremisesProvisioningErrors", "Column1.serviceProvisioningErrors"})
		in
		    #"Expanded Column1"
		```
	lineageTag: 15888ddf-40e9-49e9-84a2-1f360c26b927
	queryGroup: Template

	annotation PBI_ResultType = Table

expression Fabric_tmp_nonadmin_Workspaces = ```
		let
		    // Define your tenant ID, client ID, and client secret
		    tenantId = TID,
		    clientId = CID,
		    clientSecret = CS,
		    Scope = "https://analysis.windows.net/powerbi/api/.default",
		    API = "https://api.fabric.microsoft.com/v1",
		    What="workspaces",
		
		    // Get the access token
		    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
		    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
		    
		    // Make the request to get the token
		    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
		        [
		            Content = Text.ToBinary(body),
		            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
		        ])),
		        
		    accessToken = tokenResponse[access_token],
		
		    // Function to get groups with pagination
		    GetGroups = (url) =>
		    let
		
		        // Make the request to get groups
		        GraphResponse = Json.Document(Web.Contents(API, 
		            [
		                Headers = [#"Authorization" = "Bearer " & accessToken],
		                
		                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
		                
		            ])),
		        
		        // Get the groups from the response
		        GraphList = GraphResponse[value],
		        
		        // Check if there is a next link for pagination
		        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
		        
		        // If there is a next link, recursively get the next page
		        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
		    in
		        List.Combine({GraphList, NextGroups}),
		
		    // Initial call to the function
		    AllGroups = GetGroups(null),
		
		    // Convert the list of groups to a table
		    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error)
		in
		    GraphTable
		```
	lineageTag: b90ab287-abf2-4959-a6f8-f2ce5a066f42
	queryGroup: Template

	annotation PBI_ResultType = Table

expression Fabric_tmp_admin_Workspaces = ```
		let
		    // Define your tenant ID, client ID, and client secret
		    tenantId = TID,
		    clientId = CID,
		    clientSecret = CS,
		    Scope = "https://analysis.windows.net/powerbi/api/.default",
		    API = "https://api.fabric.microsoft.com/v1/admin",
		    What="workspaces",
		
		    // Get the access token
		    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
		    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
		    
		    // Make the request to get the token
		    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
		        [
		            Content = Text.ToBinary(body),
		            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
		        ])),
		        
		    accessToken = tokenResponse[access_token],
		
		    // Function to get groups with pagination
		    GetGroups = (url) =>
		    let
		
		        // Make the request to get groups
		        GraphResponse = Json.Document(Web.Contents(API, 
		            [
		                Headers = [#"Authorization" = "Bearer " & accessToken],
		                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
		                
		            ])),
		        
		        // Get the groups from the response
		        GraphList = Record.FieldOrDefault(GraphResponse, What, null),//GraphResponse[What],
		        
		        // Check if there is a next link for pagination
		        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
		        
		        // If there is a next link, recursively get the next page
		        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
		    in
		        List.Combine({GraphList,  NextGroups}),
		
		    // Initial call to the function
		    AllGroups = GetGroups(null),
		
		    // Convert the list of groups to a table
		    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error)
		in
		    GraphTable
		```
	lineageTag: be550a38-7041-4823-b1d2-07c95280e84f
	queryGroup: Template

	annotation PBI_ResultType = Table

expression PBI_tmp_admin_Workspaces = ```
		let
		    // Define your tenant ID, client ID, and client secret
		    tenantId = TID,
		    clientId = CID,
		    clientSecret = CS,
		    Scope = "https://analysis.windows.net/powerbi/api/.default",
		    API = "https://api.powerbi.com/v1.0/myorg/admin",
		    What="groups",
		
		    // Get the access token
		    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
		    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
		    
		    // Make the request to get the token
		    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
		        [
		            Content = Text.ToBinary(body),
		            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
		        ])),
		        
		    accessToken = tokenResponse[access_token],
		
		    // Function to get groups with pagination
		    GetGroups = (url) =>
		    let
		
		        // Make the request to get groups
		        GraphResponse = Json.Document(Web.Contents(API, 
		            [
		                Headers = [#"Authorization" = "Bearer " & accessToken],
		                RelativePath = What & "?$top=5000"
		            ]))
		    
		    in
		      GraphResponse[value],
		
		    // Initial call to the function
		    AllGroups = GetGroups(null),
		    // Initial call to the function
		    Workspaces = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandRecordColumn(Workspaces, "Column1", {"id", "isReadOnly", "isOnDedicatedCapacity", "capacityMigrationStatus", "type", "state", "hasWorkspaceLevelSettings ", "name", "capacityId", "defaultDatasetStorageFormat"}, {"id", "isReadOnly", "isOnDedicatedCapacity", "capacityMigrationStatus", "type", "state", "hasWorkspaceLevelSettings ", "name", "capacityId", "defaultDatasetStorageFormat"})
		in
		    #"Expanded Column1"
		```
	lineageTag: b3d7a430-0fdd-4542-b345-f612aadd49b8
	queryGroup: Template

	annotation PBI_ResultType = Table

expression PBI_tmp_admin_Workspaces_Scan = ```
		let
		    // Define your tenant ID, client ID, and client secret
		    tenantId = TID,
		    clientId = CID,
		    clientSecret = CS,
		    Scope = "https://analysis.windows.net/powerbi/api/.default",
		    API = "https://api.fabric.microsoft.com/v1/admin",
		    What="workspaces",
		
		    // Get the access token
		    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
		    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
		    
		    // Make the request to get the token
		    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
		        [
		            Content = Text.ToBinary(body),
		            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
		        ])),
		        
		    accessToken = tokenResponse[access_token],
		
		
		    // Function Check Status of scan function untill Succeeded
		        ScanStatus = (sid) =>
		        let
		            ScanStatus = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanStatus/", 
		                [
		                    Headers = [#"Authorization" = "Bearer " & accessToken],
		                    RelativePath = sid 
		                ])),
		            scnisready = ScanStatus[status]         
		        in 
		            scnisready,
		
		    //Function to Get Scan Result
		        GetScanResult = (sid) =>
		        let
		        ScanResult = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/scanResult/", 
		                [
		                    Headers = [#"Authorization" = "Bearer " & accessToken],
		                    RelativePath = sid 
		                ])),
		                rezlist = Record.ToList(ScanResult)
		        in
		            rezlist,
		
		    // Function to Scan & Get Result if succesful
		    WSScan = (wslist) =>
		    let
		        // Get Workspace id's
		        IdList = List.Transform(wslist, each [id]),
		
		         // Define the request body as a JSON-formatted string
		        bodys = Json.FromValue(              
		        [workspaces = IdList]
		        ),
		
		        // Make the request to get groups
		        ScanWorkspace = Json.Document(Web.Contents("https://api.powerbi.com/v1.0/myorg/admin/workspaces/getInfo", 
		            [  
		                Headers = [#"Authorization" = "Bearer " & accessToken, #"Content-Type" = "application/json"],
		                Content = bodys 
		            ])),
		        ScanID = ScanWorkspace[id],
		        
		        // Get Result
		        rezfin = if ScanStatus(ScanID) = "Succeeded" then @GetScanResult(ScanID) else Function.InvokeAfter(() => @GetScanResult(ScanID),#duration(0, 0, 0, 15))
		    in
		      rezfin, 
		
		
		    // Function to get groups with pagination
		    GetGroups = (url) =>
		    let
		
		        // Make the request to get groups
		        GraphResponse = Json.Document(Web.Contents(API, 
		            [
		                Headers = [#"Authorization" = "Bearer " & accessToken],
		                RelativePath = if url<>null then What & "?$top=5000" & Text.Middle(url, Text.PositionOf(url, "&continuationToken=")) else What & "?$top=5000" //null
		                
		            ])),
		        
		        // Get the groups from the response
		        GraphList = Record.FieldOrDefault(GraphResponse, What, null),//GraphResponse[What],
		        
		        // Check if there is a next link for pagination
		        NextLink = Record.FieldOrDefault(GraphResponse, "continuationUri", null),
		        
		        // If there is a next link, recursively get the next page
		        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
		    in
		        List.Combine({GraphList,  NextGroups}),
		
		    // Initial call to the function
		    AllGroups = GetGroups(null),
		
		    // Split List in chunks of 100
		    GroupBatches = List.Split(AllGroups, 100),
		
		    // For each chunk do a scan
		    Results = List.Transform(GroupBatches, each WSScan(_)),
		
		    //Convert List to table
		    Workspaces = Table.FromList(Results, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
		    #"Expanded Column1" = Table.ExpandListColumn(Workspaces, "Column1"),
		    #"Expanded Column2" = Table.ExpandListColumn(#"Expanded Column1", "Column1")
		in
		    #"Expanded Column2"
		```
	lineageTag: 76a5c1ab-b8e6-42af-b7db-f085d31a664c
	queryGroup: Template

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression GraphGroups = ```
		let
		    // Define your tenant ID, client ID, and client secret
		    tenantId = TID,
		    clientId = CID,
		    clientSecret = CS,
		    Scope = "https://graph.microsoft.com/.default",
		    API = "https://graph.microsoft.com/v1.0",
		    What="groups?$top=999",
		
		    // Get the access token
		    tokenUrl = "https://login.microsoftonline.com/" & tenantId & "/oauth2/v2.0/token",
		    body = "grant_type=client_credentials&client_id=" & clientId & "&client_secret=" & clientSecret & "&scope=" & Scope,
		    
		    // Make the request to get the token
		    tokenResponse = Json.Document(Web.Contents(tokenUrl, 
		        [
		            Content = Text.ToBinary(body),
		            Headers = [#"Content-Type" = "application/x-www-form-urlencoded"]
		        ])),
		        
		    accessToken = tokenResponse[access_token],
		
		    // Function to get groups with pagination
		    GetGroups = (url) =>
		    let
		
		
		        // Make the request to get groups
		        GraphResponse = Json.Document(Web.Contents(API, 
		            [
		                Headers = [#"Authorization" = "Bearer " & accessToken],
		                
		                RelativePath = if url<>null then What & Text.Middle(url, Text.PositionOf(url, "&$skiptoken=")) else What //null
		                
		            ])),
		        
		        // Get the groups from the response
		        GraphList = GraphResponse[value],
		        
		        // Check if there is a next link for pagination
		        NextLink = Record.FieldOrDefault(GraphResponse, "@odata.nextLink", null),
		        
		        // If there is a next link, recursively get the next page
		        NextGroups = if NextLink <> null then @GetGroups(NextLink) else {}
		    in
		        List.Combine({GraphList, NextGroups}),
		
		    // Initial call to the function
		    AllGroups = GetGroups(null),
		
		    // Convert the list of groups to a table
		    GraphTable = Table.FromList(AllGroups, Splitter.SplitByNothing(), null, null, ExtraValues.Error)
		in
		    GraphTable
		```
	lineageTag: f18fe638-41da-4b53-b26d-e084bd331899

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

